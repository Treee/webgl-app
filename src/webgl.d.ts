// interface WebGLContextAttributes {
//     readonly alpha: boolean;
//     readonly depth: boolean;
//     readonly stencil: boolean;
//     readonly antialias: boolean;
//     readonly premultipliedAlpha: boolean;
// }

interface WebGLObject {
    $__dummyprop__WebGLObject: any;
}

interface WebGLBuffer extends WebGLObject {
    $__dummyprop__WebGLBuffer: any;
}

interface WebGLFramebuffer extends WebGLObject {
    $__dummyprop__WebGLFramebuffer: any;
}

interface WebGLProgram extends WebGLObject {
    $__dummyprop__WebGLProgram: any;
}

interface WebGLRenderbuffer extends WebGLObject {
    $__dummyprop__WebGLRenderbuffer: any;
}

interface WebGLShader extends WebGLObject {
    $__dummyprop__WebGLShader: any;
}

interface WebGLTexture extends WebGLObject {
    $__dummyprop__WebGLTexture: any;
}

interface WebGLUniformLocation {
    $__dummyprop__WebGLUniformLocation: any;
}

interface WebGLActiveInfo {
    readonly size: number;
    readonly type: number;
    readonly name: string;
}

interface WebGLRenderingContext {
    readonly DEPTH_BUFFER_BIT: number;
    readonly STENCIL_BUFFER_BIT: number;
    readonly COLOR_BUFFER_BIT: number;
    readonly POINTS: number;
    readonly LINES: number;
    readonly LINE_LOOP: number;
    readonly LINE_STRIP: number;
    readonly TRIANGLES: number;
    readonly TRIANGLE_STRIP: number;
    readonly TRIANGLE_FAN: number;
    readonly ZERO: number;
    readonly ONE: number;
    readonly SRC_COLOR: number;
    readonly ONE_MINUS_SRC_COLOR: number;
    readonly SRC_ALPHA: number;
    readonly ONE_MINUS_SRC_ALPHA: number;
    readonly DST_ALPHA: number;
    readonly ONE_MINUS_DST_ALPHA: number;
    readonly DST_COLOR: number;
    readonly ONE_MINUS_DST_COLOR: number;
    readonly SRC_ALPHA_SATURATE: number;
    readonly FUNC_ADD: number;
    readonly BLEND_EQUATION: number;
    readonly BLEND_EQUATION_RGB: number;
    readonly BLEND_EQUATION_ALPHA: number;
    readonly FUNC_SUBTRACT: number;
    readonly FUNC_REVERSE_SUBTRACT: number;
    readonly BLEND_DST_RGB: number;
    readonly BLEND_SRC_RGB: number;
    readonly BLEND_DST_ALPHA: number;
    readonly BLEND_SRC_ALPHA: number;
    readonly CONSTANT_COLOR: number;
    readonly ONE_MINUS_CONSTANT_COLOR: number;
    readonly CONSTANT_ALPHA: number;
    readonly ONE_MINUS_CONSTANT_ALPHA: number;
    readonly BLEND_COLOR: number;
    readonly ARRAY_BUFFER: number;
    readonly ELEMENT_ARRAY_BUFFER: number;
    readonly ARRAY_BUFFER_BINDING: number;
    readonly ELEMENT_ARRAY_BUFFER_BINDING: number;
    readonly STREAM_DRAW: number;
    readonly STATIC_DRAW: number;
    readonly DYNAMIC_DRAW: number;
    readonly BUFFER_SIZE: number;
    readonly BUFFER_USAGE: number;
    readonly CURRENT_VERTEX_ATTRIB: number;
    readonly FRONT: number;
    readonly BACK: number;
    readonly FRONT_AND_BACK: number;
    readonly TEXTURE_2D: number;
    readonly CULL_FACE: number;
    readonly BLEND: number;
    readonly DITHER: number;
    readonly STENCIL_TEST: number;
    readonly DEPTH_TEST: number;
    readonly SCISSOR_TEST: number;
    readonly POLYGON_OFFSET_FILL: number;
    readonly SAMPLE_ALPHA_TO_COVERAGE: number;
    readonly SAMPLE_COVERAGE: number;
    readonly NO_ERROR: number;
    readonly INVALID_ENUM: number;
    readonly INVALID_VALUE: number;
    readonly INVALID_OPERATION: number;
    readonly OUT_OF_MEMORY: number;
    readonly CW: number;
    readonly CCW: number;
    readonly LINE_WIDTH: number;
    readonly ALIASED_POINT_SIZE_RANGE: number;
    readonly ALIASED_LINE_WIDTH_RANGE: number;
    readonly CULL_FACE_MODE: number;
    readonly FRONT_FACE: number;
    readonly DEPTH_RANGE: number;
    readonly DEPTH_WRITEMASK: number;
    readonly DEPTH_CLEAR_VALUE: number;
    readonly DEPTH_FUNC: number;
    readonly STENCIL_CLEAR_VALUE: number;
    readonly STENCIL_FUNC: number;
    readonly STENCIL_FAIL: number;
    readonly STENCIL_PASS_DEPTH_FAIL: number;
    readonly STENCIL_PASS_DEPTH_PASS: number;
    readonly STENCIL_REF: number;
    readonly STENCIL_VALUE_MASK: number;
    readonly STENCIL_WRITEMASK: number;
    readonly STENCIL_BACK_FUNC: number;
    readonly STENCIL_BACK_FAIL: number;
    readonly STENCIL_BACK_PASS_DEPTH_FAIL: number;
    readonly STENCIL_BACK_PASS_DEPTH_PASS: number;
    readonly STENCIL_BACK_REF: number;
    readonly STENCIL_BACK_VALUE_MASK: number;
    readonly STENCIL_BACK_WRITEMASK: number;
    readonly VIEWPORT: number;
    readonly SCISSOR_BOX: number;
    readonly COLOR_CLEAR_VALUE: number;
    readonly COLOR_WRITEMASK: number;
    readonly UNPACK_ALIGNMENT: number;
    readonly PACK_ALIGNMENT: number;
    readonly MAX_TEXTURE_SIZE: number;
    readonly MAX_VIEWPORT_DIMS: number;
    readonly SUBPIXEL_BITS: number;
    readonly RED_BITS: number;
    readonly GREEN_BITS: number;
    readonly BLUE_BITS: number;
    readonly ALPHA_BITS: number;
    readonly DEPTH_BITS: number;
    readonly STENCIL_BITS: number;
    readonly POLYGON_OFFSET_UNITS: number;
    readonly POLYGON_OFFSET_FACTOR: number;
    readonly TEXTURE_BINDING_2D: number;
    readonly SAMPLE_BUFFERS: number;
    readonly SAMPLES: number;
    readonly SAMPLE_COVERAGE_VALUE: number;
    readonly SAMPLE_COVERAGE_INVERT: number;
    readonly NUM_COMPRESSED_TEXTURE_FORMATS: number;
    readonly COMPRESSED_TEXTURE_FORMATS: number;
    readonly DONT_CARE: number;
    readonly FASTEST: number;
    readonly NICEST: number;
    readonly GENERATE_MIPMAP_HINT: number;
    readonly BYTE: number;
    readonly UNSIGNED_BYTE: number;
    readonly SHORT: number;
    readonly UNSIGNED_SHORT: number;
    readonly INT: number;
    readonly UNSIGNED_INT: number;
    readonly FLOAT: number;
    readonly DEPTH_COMPONENT: number;
    readonly ALPHA: number;
    readonly RGB: number;
    readonly RGBA: number;
    readonly LUMINANCE: number;
    readonly LUMINANCE_ALPHA: number;
    readonly UNSIGNED_SHORT_4_4_4_4: number;
    readonly UNSIGNED_SHORT_5_5_5_1: number;
    readonly UNSIGNED_SHORT_5_6_5: number;
    readonly FRAGMENT_SHADER: number;
    readonly VERTEX_SHADER: number;
    readonly MAX_VERTEX_ATTRIBS: number;
    readonly MAX_VERTEX_UNIFORM_VECTORS: number;
    readonly MAX_VARYING_VECTORS: number;
    readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: number;
    readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: number;
    readonly MAX_TEXTURE_IMAGE_UNITS: number;
    readonly MAX_FRAGMENT_UNIFORM_VECTORS: number;
    readonly SHADER_TYPE: number;
    readonly DELETE_STATUS: number;
    readonly LINK_STATUS: number;
    readonly VALIDATE_STATUS: number;
    readonly ATTACHED_SHADERS: number;
    readonly ACTIVE_UNIFORMS: number;
    readonly ACTIVE_UNIFORM_MAX_LENGTH: number;
    readonly ACTIVE_ATTRIBUTES: number;
    readonly ACTIVE_ATTRIBUTE_MAX_LENGTH: number;
    readonly SHADING_LANGUAGE_VERSION: number;
    readonly CURRENT_PROGRAM: number;
    readonly NEVER: number;
    readonly LESS: number;
    readonly EQUAL: number;
    readonly LEQUAL: number;
    readonly GREATER: number;
    readonly NOTEQUAL: number;
    readonly GEQUAL: number;
    readonly ALWAYS: number;
    readonly KEEP: number;
    readonly REPLACE: number;
    readonly INCR: number;
    readonly DECR: number;
    readonly INVERT: number;
    readonly INCR_WRAP: number;
    readonly DECR_WRAP: number;
    readonly VENDOR: number;
    readonly RENDERER: number;
    readonly VERSION: number;
    readonly NEAREST: number;
    readonly LINEAR: number;
    readonly NEAREST_MIPMAP_NEAREST: number;
    readonly LINEAR_MIPMAP_NEAREST: number;
    readonly NEAREST_MIPMAP_LINEAR: number;
    readonly LINEAR_MIPMAP_LINEAR: number;
    readonly TEXTURE_MAG_FILTER: number;
    readonly TEXTURE_MIN_FILTER: number;
    readonly TEXTURE_WRAP_S: number;
    readonly TEXTURE_WRAP_T: number;
    readonly TEXTURE: number;
    readonly TEXTURE_CUBE_MAP: number;
    readonly TEXTURE_BINDING_CUBE_MAP: number;
    readonly TEXTURE_CUBE_MAP_POSITIVE_X: number;
    readonly TEXTURE_CUBE_MAP_NEGATIVE_X: number;
    readonly TEXTURE_CUBE_MAP_POSITIVE_Y: number;
    readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: number;
    readonly TEXTURE_CUBE_MAP_POSITIVE_Z: number;
    readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: number;
    readonly MAX_CUBE_MAP_TEXTURE_SIZE: number;
    readonly TEXTURE0: number;
    readonly TEXTURE1: number;
    readonly TEXTURE2: number;
    readonly TEXTURE3: number;
    readonly TEXTURE4: number;
    readonly TEXTURE5: number;
    readonly TEXTURE6: number;
    readonly TEXTURE7: number;
    readonly TEXTURE8: number;
    readonly TEXTURE9: number;
    readonly TEXTURE10: number;
    readonly TEXTURE11: number;
    readonly TEXTURE12: number;
    readonly TEXTURE13: number;
    readonly TEXTURE14: number;
    readonly TEXTURE15: number;
    readonly TEXTURE16: number;
    readonly TEXTURE17: number;
    readonly TEXTURE18: number;
    readonly TEXTURE19: number;
    readonly TEXTURE20: number;
    readonly TEXTURE21: number;
    readonly TEXTURE22: number;
    readonly TEXTURE23: number;
    readonly TEXTURE24: number;
    readonly TEXTURE25: number;
    readonly TEXTURE26: number;
    readonly TEXTURE27: number;
    readonly TEXTURE28: number;
    readonly TEXTURE29: number;
    readonly TEXTURE30: number;
    readonly TEXTURE31: number;
    readonly ACTIVE_TEXTURE: number;
    readonly REPEAT: number;
    readonly CLAMP_TO_EDGE: number;
    readonly MIRRORED_REPEAT: number;
    readonly FLOAT_VEC2: number;
    readonly FLOAT_VEC3: number;
    readonly FLOAT_VEC4: number;
    readonly INT_VEC2: number;
    readonly INT_VEC3: number;
    readonly INT_VEC4: number;
    readonly boolean: number;
    readonly boolean_VEC2: number;
    readonly boolean_VEC3: number;
    readonly boolean_VEC4: number;
    readonly FLOAT_MAT2: number;
    readonly FLOAT_MAT3: number;
    readonly FLOAT_MAT4: number;
    readonly SAMPLER_2D: number;
    readonly SAMPLER_CUBE: number;
    readonly VERTEX_ATTRIB_ARRAY_ENABLED: number;
    readonly VERTEX_ATTRIB_ARRAY_SIZE: number;
    readonly VERTEX_ATTRIB_ARRAY_STRIDE: number;
    readonly VERTEX_ATTRIB_ARRAY_TYPE: number;
    readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: number;
    readonly VERTEX_ATTRIB_ARRAY_POINTER: number;
    readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: number;
    readonly COMPILE_STATUS: number;
    readonly INFO_LOG_LENGTH: number;
    readonly SHADER_SOURCE_LENGTH: number;
    readonly LOW_FLOAT: number;
    readonly MEDIUM_FLOAT: number;
    readonly HIGH_FLOAT: number;
    readonly LOW_INT: number;
    readonly MEDIUM_INT: number;
    readonly HIGH_INT: number;
    readonly FRAMEBUFFER: number;
    readonly RENDERBUFFER: number;
    readonly RGBA4: number;
    readonly RGB5_A1: number;
    readonly RGB565: number;
    readonly DEPTH_COMPONENT16: number;
    readonly STENCIL_INDEX: number;
    readonly STENCIL_INDEX8: number;
    readonly DEPTH_STENCIL: number;
    readonly RENDERBUFFER_WIDTH: number;
    readonly RENDERBUFFER_HEIGHT: number;
    readonly RENDERBUFFER_INTERNAL_FORMAT: number;
    readonly RENDERBUFFER_RED_SIZE: number;
    readonly RENDERBUFFER_GREEN_SIZE: number;
    readonly RENDERBUFFER_BLUE_SIZE: number;
    readonly RENDERBUFFER_ALPHA_SIZE: number;
    readonly RENDERBUFFER_DEPTH_SIZE: number;
    readonly RENDERBUFFER_STENCIL_SIZE: number;
    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: number;
    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: number;
    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: number;
    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: number;
    readonly COLOR_ATTACHMENT0: number;
    readonly DEPTH_ATTACHMENT: number;
    readonly STENCIL_ATTACHMENT: number;
    readonly DEPTH_STENCIL_ATTACHMENT: number;
    readonly NONE: number;
    readonly FRAMEBUFFER_COMPLETE: number;
    readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: number;
    readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: number;
    readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: number;
    readonly FRAMEBUFFER_UNSUPPORTED: number;
    readonly FRAMEBUFFER_BINDING: number;
    readonly RENDERBUFFER_BINDING: number;
    readonly MAX_RENDERBUFFER_SIZE: number;
    readonly INVALID_FRAMEBUFFER_OPERATION: number;
    readonly UNPACK_FLIP_Y_WEBGL: number;
    readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: number;
    readonly CONTEXT_LOST_WEBGL: number;
    readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: number;
    readonly BROWSER_DEFAULT_WEBGL: number;
    readonly canvas: HTMLCanvasElement;
    getContextAttributes(): WebGLContextAttributes;
    isContextLost(): boolean;
    getSupportedExtensions(): string[];
    getExtension(name: string): any;
    activeTexture(texture: number): void;
    attachShader(program: WebGLProgram, shader: WebGLShader): void;
    bindAttribLocation(program: WebGLProgram, index: number, name: string): void;
    bindBuffer(target: number, buffer: WebGLBuffer): void;
    bindFramebuffer(target: number, framebuffer: WebGLFramebuffer): void;
    bindRenderbuffer(target: number, renderbuffer: WebGLRenderbuffer): void;
    bindTexture(target: number, texture: WebGLTexture): void;
    blendColor(red: number, green: number, blue: number, alpha: number): void;
    blendEquation(mode: number): void;
    blendEquationSeparate(modeRGB: number, modeAlpha: number): void;
    blendFunc(sfactor: number, dfactor: number): void;
    blendFuncSeparate(srcRGB: number, dstRGB: number, srcAlpha: number, dstAlpha: number): void;
    bufferData(target: number, size: number, usage: number): void;
    bufferData(target: number, data: ArrayBufferView, usage: number): void;
    bufferData(target: number, data: ArrayBuffer, usage: number): void;
    bufferSubData(target: number, offset: number, data: ArrayBufferView): void;
    bufferSubData(target: number, offset: number, data: ArrayBuffer): void;
    checkFramebufferStatus(target: number): number;
    clear(mask: number): void;
    clearColor(red: number, green: number, blue: number, alpha: number): void;
    clearDepth(depth: number): void;
    clearStencil(s: number): void;
    colorMask(red: boolean, green: boolean, blue: boolean, alpha: boolean): void;
    compileShader(shader: WebGLShader): void;
    copyTexImage2D(target: number, level: number, internalformat: number, x: number, y: number, width: number, height: number, border: number): void;
    copyTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, x: number, y: number, width: number, height: number): void;
    createBuffer(): WebGLBuffer;
    createFramebuffer(): WebGLFramebuffer;
    createProgram(): WebGLProgram;
    createRenderbuffer(): WebGLRenderbuffer;
    createShader(type: number): WebGLShader;
    createTexture(): WebGLTexture;
    cullFace(mode: number): void;
    deleteBuffer(buffer: WebGLBuffer): void;
    deleteFramebuffer(framebuffer: WebGLFramebuffer): void;
    deleteProgram(program: WebGLProgram): void;
    deleteRenderbuffer(renderbuffer: WebGLRenderbuffer): void;
    deleteShader(shader: WebGLShader): void;
    deleteTexture(texture: WebGLTexture): void;
    depthFunc(func: number): void;
    depthMask(flag: boolean): void;
    depthRange(zNear: number, zFar: number): void;
    detachShader(program: WebGLProgram, shader: WebGLShader): void;
    disable(cap: number): void;
    disableVertexAttribArray(index: number): void;
    drawArrays(mode: number, first: number, count: number): void;
    drawElements(mode: number, count: number, type: number, offset: number): void;
    enable(cap: number): void;
    enableVertexAttribArray(index: number): void;
    finish(): void;
    flush(): void;
    framebufferRenderbuffer(target: number, attachment: number, renderbuffertarget: number, renderbuffer: WebGLRenderbuffer): void;
    framebufferTexture2D(target: number, attachment: number, textarget: number, texture: WebGLTexture, level: number): void;
    frontFace(mode: number): void;
    generateMipmap(target: number): void;
    getActiveAttrib(program: WebGLProgram, index: number): WebGLActiveInfo;
    getActiveUniform(program: WebGLProgram, index: number): WebGLActiveInfo;
    getAttachedShaders(program: WebGLProgram): WebGLShader[];
    getAttribLocation(program: WebGLProgram, name: string): number;
    getParameter(pname: number): any;
    getBufferParameter(target: number, pname: number): any;
    getError(): number;
    getFramebufferAttachmentParameter(target: number, attachment: number, pname: number): any;
    getProgramParameter(program: WebGLProgram, pname: number): any;
    getProgramInfoLog(program: WebGLProgram): string;
    getRenderbufferParameter(target: number, pname: number): any;
    getShaderParameter(shader: WebGLShader, pname: number): any;
    getShaderInfoLog(shader: WebGLShader): string;
    getShaderSource(shader: WebGLShader): string;
    getTexParameter(target: number, pname: number): any;
    getUniform(program: WebGLProgram, location: WebGLUniformLocation): any;
    getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation;
    getVertexAttrib(index: number, pname: number): any;
    getVertexAttribOffset(index: number, pname: number): number;
    hint(target: number, mode: number): void;
    isBuffer(buffer: WebGLBuffer): boolean;
    isEnabled(cap: number): boolean;
    isFramebuffer(framebuffer: WebGLFramebuffer): boolean;
    isProgram(program: WebGLProgram): boolean;
    isRenderbuffer(renderbuffer: WebGLRenderbuffer): boolean;
    isShader(shader: WebGLShader): boolean;
    isTexture(texture: WebGLTexture): boolean;
    lineWidth(width: number): void;
    linkProgram(program: WebGLProgram): void;
    pixelStorei(pname: number, param: number): void;
    polygonOffset(factor: number, units: number): void;
    readPixels(x: number, y: number, width: number, height: number, format: number, type: number, pixels: ArrayBufferView): void;
    renderbufferStorage(target: number, internalformat: number, width: number, height: number): void;
    sampleCoverage(value: number, invert: boolean): void;
    scissor(x: number, y: number, width: number, height: number): void;
    shaderSource(shader: WebGLShader, source: string): void;
    stencilFunc(func: number, ref: number, mask: number): void;
    stencilFuncSeparate(face: number, func: number, ref: number, mask: number): void;
    stencilMask(mask: number): void;
    stencilMaskSeparate(face: number, mask: number): void;
    stencilOp(fail: number, zfail: number, zpass: number): void;
    stencilOpSeparate(face: number, fail: number, zfail: number, zpass: number): void;
    texImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, format: number, type: number, pixels: ArrayBufferView): void;
    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, pixels: ImageData): void;
    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, image: HTMLImageElement): void;
    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, canvas: HTMLCanvasElement): void;
    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, video: HTMLVideoElement): void;
    texParameterf(target: number, pname: number, param: number): void;
    texParameteri(target: number, pname: number, param: number): void;
    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, type: number, pixels: ArrayBufferView): void;
    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, pixels: ImageData): void;
    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, image: HTMLImageElement): void;
    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, canvas: HTMLCanvasElement): void;
    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, video: HTMLVideoElement): void;
    uniform1f(location: WebGLUniformLocation, x: number): void;
    uniform1fv(location: WebGLUniformLocation, v: Float32Array): void;
    uniform1fv(location: WebGLUniformLocation, v: number[]): void;
    uniform1i(location: WebGLUniformLocation, x: number): void;
    uniform1iv(location: WebGLUniformLocation, v: Int32Array): void;
    uniform1iv(location: WebGLUniformLocation, v: number[]): void;
    uniform2f(location: WebGLUniformLocation, x: number, y: number): void;
    uniform2fv(location: WebGLUniformLocation, v: Float32Array): void;
    uniform2fv(location: WebGLUniformLocation, v: number[]): void;
    uniform2i(location: WebGLUniformLocation, x: number, y: number): void;
    uniform2iv(location: WebGLUniformLocation, v: Int32Array): void;
    uniform2iv(location: WebGLUniformLocation, v: number[]): void;
    uniform3f(location: WebGLUniformLocation, x: number, y: number, z: number): void;
    uniform3fv(location: WebGLUniformLocation, v: Float32Array): void;
    uniform3fv(location: WebGLUniformLocation, v: number[]): void;
    uniform3i(location: WebGLUniformLocation, x: number, y: number, z: number): void;
    uniform3iv(location: WebGLUniformLocation, v: Int32Array): void;
    uniform3iv(location: WebGLUniformLocation, v: number[]): void;
    uniform4f(location: WebGLUniformLocation, x: number, y: number, z: number, w: number): void;
    uniform4fv(location: WebGLUniformLocation, v: Float32Array): void;
    uniform4fv(location: WebGLUniformLocation, v: number[]): void;
    uniform4i(location: WebGLUniformLocation, x: number, y: number, z: number, w: number): void;
    uniform4iv(location: WebGLUniformLocation, v: Int32Array): void;
    uniform4iv(location: WebGLUniformLocation, v: number[]): void;
    uniformMatrix2fv(location: WebGLUniformLocation, transpose: boolean, value: Float32Array): void;
    uniformMatrix2fv(location: WebGLUniformLocation, transpose: boolean, value: number[]): void;
    uniformMatrix3fv(location: WebGLUniformLocation, transpose: boolean, value: Float32Array): void;
    uniformMatrix3fv(location: WebGLUniformLocation, transpose: boolean, value: number[]): void;
    uniformMatrix4fv(location: WebGLUniformLocation, transpose: boolean, value: Float32Array): void;
    uniformMatrix4fv(location: WebGLUniformLocation, transpose: boolean, value: number[]): void;
    useProgram(program: WebGLProgram): void;
    validateProgram(program: WebGLProgram): void;
    vertexAttrib1f(indx: number, x: number): void;
    vertexAttrib1fv(indx: number, values: Float32Array): void;
    vertexAttrib1fv(indx: number, values: number[]): void;
    vertexAttrib2f(indx: number, x: number, y: number): void;
    vertexAttrib2fv(indx: number, values: Float32Array): void;
    vertexAttrib2fv(indx: number, values: number[]): void;
    vertexAttrib3f(indx: number, x: number, y: number, z: number): void;
    vertexAttrib3fv(indx: number, values: Float32Array): void;
    vertexAttrib3fv(indx: number, values: number[]): void;
    vertexAttrib4f(indx: number, x: number, y: number, z: number, w: number): void;
    vertexAttrib4fv(indx: number, values: Float32Array): void;
    vertexAttrib4fv(indx: number, values: number[]): void;
    vertexAttribPointer(indx: number, size: number, type: number, normalized: boolean, stride: number, offset: number): void;
    viewport(x: number, y: number, width: number, height: number): void;
}

interface WebGLContextEvent extends Event {
    readonly statusMessage: string;
    initWebGLContextEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, statusMessageArg: string): void;
}

//Extend the window object with cross Browser callbacks so TS will not complain 
//Also add the (non-standard) Canvas Element parameter for performance improvement 
interface WindowAnimationTiming {
    requestAnimationFrame(callback: FrameRequestCallback, canvas?: HTMLCanvasElement): number;
    //msRequestAnimationFrame(callback: FrameRequestCallback, canvas ?: HTMLCanvasElement): number;
    mozRequestAnimationFrame(callback: FrameRequestCallback, canvas?: HTMLCanvasElement): number;
    webkitRequestAnimationFrame(callback: FrameRequestCallback, canvas?: HTMLCanvasElement): number;
    oRequestAnimationFrame(callback: FrameRequestCallback, canvas?: HTMLCanvasElement): number;

    cancelRequestAnimationFrame(handle: number): void;
    //msCancelRequestAnimationFrame(handle: number): void;
    mozCancelRequestAnimationFrame(handle: number): void;
    webkitCancelRequestAnimationFrame(handle: number): void;
    oCancelRequestAnimationFrame(handle: number): void;
}

//To make WebGL work 
interface HTMLCanvasElement {
    getContext(contextId: string, params: {}): WebGLRenderingContext;
}